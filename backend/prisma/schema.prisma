// ---------- BASE CONFIG ----------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------------------------------------------------------
enum Role {
  student
  teacher
  admin
}

enum PointsTxnType {
  purchase
  course_purchase
  referral
  achievement
}

enum CourseStatus {
  draft
  published
  archived
  rejected
}

enum LessonType {
  lesson
  quiz
  assignment
}

enum QuestionType {
  single
  multiple
  true_false
  order
}

enum TutoringLocationType {
  online
  offline
  both
}

enum TutoringStatus {
  pending
  approved
  rejected
  confirmed
  completed
  cancelled
}

enum TutoringRequestStatus {
  pending
  accepted
  rejected
}

enum AppointmentStatus {
  confirmed
  completed
  cancelled
}

enum AchievementCategory {
  learning
  community
  mastery
}

enum BadgeType {
  course
  tutoring
  achievement
}

enum NotificationType {
  info
  success
  warning
  error
}

enum SubscriptionPeriod {
  monthly
  annual
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum PaymentReferenceType {
  subscription
  course
  bundle
  points
}

// ---------- MODELS ---------------------------------------------------------

model User {
  id            String            @id @default(uuid())
  name          String
  email         String            @unique
  passwordHash  String
  role          Role
  avatar        String?           @db.VarChar(255)
  bio           String?
  createdAt     DateTime          @default(now())
  points        Int               @default(0)
  referralCode  String?           @unique @db.VarChar(50)
  referredById  String?
  referredBy    User?             @relation("UserReferrals", fields: [referredById], references: [id])
  referrals     User[]            @relation("UserReferrals")
  lastLogin     DateTime?
  // Relations
  teacherProfile      TeacherProfile?
  availability        UserAvailability[]
  pointsTransactions  PointsTransaction[]
  courses             Course[]          @relation("CourseTeacher")
  enrollments         Enrollment[]
  lessonProgress      LessonProgress[]
  quizAttempts        QuizAttempt[]
  assignmentSubs      AssignmentSubmission[]
  courseReviews       CourseReview[]
  tutoringSessions    TutoringSession[] @relation("SessionTeacher")
  tutoringRequests    TutoringRequest[] @relation("RequestStudent")
  tutoringAppointmentsAsTeacher TutoringAppointment[] @relation("AppointmentTeacher")
  tutoringAppointmentsAsStudent TutoringAppointment[] @relation("AppointmentStudent")
  tutoringReviews     TutoringReview[]
  tutoringMessages    TutoringMessage[] @relation("MessageSender")
  achievements        UserAchievement[]
  certificates        Certificate[]
  conversationParts   ConversationParticipant[]
  sentMessages        Message[]         @relation("MessageSenderConv")
  attachments         Attachment[]      @relation("UserAttachments")
  notifications       Notification[]
  subscriptionRecords UserSubscription[]
  bundlesOwned        UserBundle[]
  payments            Payment[]
  calendarEvents      CalendarEvent[]
  eventsAsTeacher     CalendarEvent[]   @relation("EventTeacher")
  eventsAsStudent     CalendarEvent[]   @relation("EventStudent")
  blogPosts           BlogPost[]        @relation("PostAuthor")
  blogComments        BlogComment[]
  submissionsGraded   AssignmentSubmission[] @relation("SubmissionGrader")
}

model TeacherProfile {
  userId        String      @id
  specialization String[]
  rating        Decimal?    @db.Decimal(3, 2)
  students      Int         @default(0)
  education     String?
  experience    String?
  certificates  String[]
  user          User        @relation(fields: [userId], references: [id])
}

model UserAvailability {
  id         String   @id @default(uuid())
  userId     String
  dayOfWeek  Int
  startTime  DateTime @db.Time
  endTime    DateTime @db.Time
  user       User     @relation(fields: [userId], references: [id])
  @@unique([userId, dayOfWeek, startTime])
}

model PointsTransaction {
  id          String         @id @default(uuid())
  userId      String
  amount      Int
  type        PointsTxnType
  description String?
  createdAt   DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id])
}

// COURSES -------------------------------------------------------------------

model Course {
  id            String     @id @default(uuid())
  title         String
  description   String?
  subject       String
  image         String?
  price         Decimal     @db.Decimal(10, 2)
  pointsPrice   Int
  teacherId     String
  students      Int         @default(0)
  rating        Decimal?    @db.Decimal(3, 2)
  status        CourseStatus @default(draft)
  featured      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  // Relations
  teacher       User        @relation("CourseTeacher", fields: [teacherId], references: [id])
  topics        Topic[]
  enrollments   Enrollment[]
  reviews       CourseReview[]
  lessons       Lesson[]    @relation("LessonCourse")
  quizAttempts  QuizAttempt[] @relation("AttemptCourse")
  certificates  Certificate[]
  bundleCourses BundleCourse[]
  calendarEvents CalendarEvent[]
}

model Topic {
  id          String  @id @default(uuid())
  courseId    String
  title       String
  description String?
  orderIndex  Int
  course      Course  @relation(fields: [courseId], references: [id])
  lessons     Lesson[]
  @@unique([courseId, orderIndex])
}

model Lesson {
  id          String     @id @default(uuid())
  topicId     String
  title       String
  description String?
  videoUrl    String?
  content     String?
  duration    Int?
  orderIndex  Int
  type        LessonType
  topic       Topic      @relation(fields: [topicId], references: [id])
  quiz        Quiz?
  assignment  Assignment?
  progress    LessonProgress[]
  calendarEvents CalendarEvent[]
  courseId    String?
  course      Course?    @relation("LessonCourse", fields: [courseId], references: [id])
  @@unique([topicId, orderIndex])
}

model Quiz {
  id          String     @id @default(uuid())
  lessonId    String     @unique
  title       String
  description String?
  timeLimit   Int?
  lesson      Lesson     @relation(fields: [lessonId], references: [id])
  questions   Question[]
  attempts    QuizAttempt[]
}

model Question {
  id             String       @id @default(uuid())
  quizId         String
  questionText   String
  type           QuestionType
  options        Json
  correctOptions Int[]
  orderIndex     Int?
  quiz           Quiz         @relation(fields: [quizId], references: [id])
}

model Assignment {
  id               String    @id @default(uuid())
  lessonId         String    @unique
  title            String
  description      String?
  dueDate          DateTime?
  maxScore         Int
  allowFileUpload  Boolean   @default(true)
  allowedFileTypes String[]
  unitTests        Json?
  lesson           Lesson    @relation(fields: [lessonId], references: [id])
  submissions      AssignmentSubmission[]
}

// ENROLLMENTS & PROGRESS ----------------------------------------------------

model Enrollment {
  id          String   @id @default(uuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  completed   Boolean  @default(false)
  completedAt DateTime?
  user        User     @relation(fields: [userId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])
  @@unique([userId, courseId])
}

model LessonProgress {
  id           String   @id @default(uuid())
  userId       String
  lessonId     String
  completed    Boolean  @default(false)
  completedAt  DateTime?
  lastPosition Int      @default(0)
  user         User     @relation(fields: [userId], references: [id])
  lesson       Lesson   @relation(fields: [lessonId], references: [id])
  @@unique([userId, lessonId])
}

model QuizAttempt {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  score       Int
  duration    Int?
  completedAt DateTime @default(now())
  answers     Json
  user        User     @relation(fields: [userId], references: [id])
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  courseId    String?
  course      Course?  @relation("AttemptCourse", fields: [courseId], references: [id])
}

model AssignmentSubmission {
  id          String   @id @default(uuid())
  userId      String
  assignmentId String
  content     String?
  fileUrls    String[]
  submittedAt DateTime @default(now())
  score       Int?
  feedback    String?
  gradedAt    DateTime?
  gradedById  String?
  user        User     @relation(fields: [userId], references: [id])
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  gradedBy    User?     @relation("SubmissionGrader", fields: [gradedById], references: [id])
}

// REVIEWS -------------------------------------------------------------------

model CourseReview {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  @@unique([userId, courseId])
}

// TUTORING ------------------------------------------------------------------

model TutoringSession {
  id             String            @id @default(uuid())
  teacherId      String
  subject        String
  description    String?
  pricePerHour   Decimal           @db.Decimal(10, 2)
  locationType   TutoringLocationType
  status         TutoringStatus    @default(pending)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  maxStudents    Int               @default(1)
  prerequisites  String[]
  level          String?
  tags           String[]
  featured       Boolean           @default(false)
  teacher        User              @relation("SessionTeacher", fields: [teacherId], references: [id])
  availability   TutoringAvailability[]
  requests       TutoringRequest[]
  appointments   TutoringAppointment[]  @relation("SessionAppointments")
  reviews        TutoringReview[]
  certificates   Certificate[]
}

model TutoringAvailability {
  id        String @id @default(uuid())
  sessionId String
  dayOfWeek Int
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  session   TutoringSession @relation(fields: [sessionId], references: [id])
}

model TutoringRequest {
  id             String                @id @default(uuid())
  sessionId      String
  studentId      String
  message        String?
  preferredDates DateTime[]
  status         TutoringRequestStatus @default(pending)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  session        TutoringSession       @relation(fields: [sessionId], references: [id])
  student        User                  @relation("RequestStudent", fields: [studentId], references: [id])
  appointment    TutoringAppointment?
  messages       TutoringMessage[]
}

model TutoringAppointment {
  id           String           @id @default(uuid())
  requestId    String  @unique
  sessionId    String
  scheduledAt  DateTime
  duration     Int
  notes        String?
  meetingLink  String?
  status       AppointmentStatus @default(confirmed)
  price        Decimal          @db.Decimal(10, 2)
  teacherId    String
  studentId    String
  request      TutoringRequest  @relation(fields: [requestId], references: [id])
  session      TutoringSession  @relation("SessionAppointments", fields: [sessionId], references: [id])
  teacher      User            @relation("AppointmentTeacher", fields: [teacherId], references: [id])
  student      User            @relation("AppointmentStudent", fields: [studentId], references: [id])
}

model TutoringReview {
  id        String   @id @default(uuid())
  sessionId String
  studentId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  session   TutoringSession @relation(fields: [sessionId], references: [id])
  student   User           @relation(fields: [studentId], references: [id])
  @@unique([studentId, sessionId])
}

model TutoringMessage {
  id         String   @id @default(uuid())
  requestId  String
  senderId   String
  message    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  request    TutoringRequest @relation(fields: [requestId], references: [id])
  sender     User            @relation("MessageSender", fields: [senderId], references: [id])
}

// ACHIEVEMENTS & BADGES -----------------------------------------------------

model Achievement {
  id             String             @id @default(uuid())
  name           String
  description    String?
  pointsRewarded Int
  icon           String?
  category       AchievementCategory
  users          UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  completed     Boolean  @default(false)
  completedAt   DateTime?
  progress      Int      @default(0)
  user          User      @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  @@unique([userId, achievementId])
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  type        BadgeType
  category    String?
  certificates Certificate[]
}

model Certificate {
  id           String   @id @default(uuid())
  userId       String
  title        String
  issueDate    DateTime @default(now())
  type         String
  courseId     String?
  courseName   String?
  tutoringId   String?
  tutoringSubject String?
  teacherId    String?
  teacherName  String?
  customMessage String?
  imageUrl     String?
  badgeId      String?
  user         User      @relation(fields: [userId], references: [id])
  course       Course?   @relation(fields: [courseId], references: [id])
  tutoring     TutoringSession? @relation(fields: [tutoringId], references: [id])
  badge        Badge?    @relation(fields: [badgeId], references: [id])
}

// MESSAGING & NOTIFICATIONS -------------------------------------------------

model Conversation {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  @@id([conversationId, userId])
}

model Message {
  id              String   @id @default(uuid())
  conversationId  String
  senderId        String
  content         String
  timestamp       DateTime @default(now())
  read            Boolean  @default(false)
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  sender          User         @relation("MessageSenderConv", fields: [senderId], references: [id])
  attachments     Attachment[]
}

model Attachment {
  id        String   @id @default(uuid())
  messageId String
  userId    String?
  fileName  String
  fileUrl   String
  fileType  String
  fileSize  Int
  message   Message  @relation(fields: [messageId], references: [id])
  user      User?    @relation("UserAttachments", fields: [userId], references: [id])
}

model Notification {
  id        String          @id @default(uuid())
  userId    String
  title     String
  message   String
  read      Boolean         @default(false)
  type      NotificationType
  link      String?
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id])
}

// SUBSCRIPTIONS & PAYMENTS --------------------------------------------------

model SubscriptionPlan {
  id              String         @id @default(uuid())
  name            String
  description     String?
  price           Decimal        @db.Decimal(10, 2)
  period          SubscriptionPeriod
  featuredBenefit String?
  benefits        String[]
  isPopular       Boolean        @default(false)
  users           UserSubscription[]
}

model CourseBundle {
  id              String        @id @default(uuid())
  name            String
  description     String?
  price           Decimal       @db.Decimal(10, 2)
  originalPrice   Decimal       @db.Decimal(10, 2)
  discount        Int
  featuredBenefit String?
  benefits        String[]
  imageUrl        String?
  courses         BundleCourse[]
  owners          UserBundle[]
}

model BundleCourse {
  bundleId String
  courseId String
  bundle   CourseBundle @relation(fields: [bundleId], references: [id])
  course   Course       @relation(fields: [courseId], references: [id])
  @@id([bundleId, courseId])
}

model UserSubscription {
  id              String   @id @default(uuid())
  userId          String
  planId          String
  startDate       DateTime @default(now())
  endDate         DateTime
  isActive        Boolean  @default(true)
  autoRenew       Boolean  @default(true)
  paymentMethod   String?
  lastPaymentDate DateTime?
  user            User             @relation(fields: [userId], references: [id])
  plan            SubscriptionPlan @relation(fields: [planId], references: [id])
}

model UserBundle {
  id           String   @id @default(uuid())
  userId       String
  bundleId     String
  purchaseDate DateTime @default(now())
  user         User         @relation(fields: [userId], references: [id])
  bundle       CourseBundle @relation(fields: [bundleId], references: [id])
}

model Payment {
  id             String            @id @default(uuid())
  userId         String
  amount         Decimal           @db.Decimal(10, 2)
  currency       String            @db.VarChar(3) @default("RON")
  paymentMethod  String?
  status         PaymentStatus
  referenceType  PaymentReferenceType
  referenceId    String?
  transactionId  String?
  createdAt      DateTime          @default(now())
  user           User              @relation(fields: [userId], references: [id])
}

// CALENDAR ------------------------------------------------------------------

model CalendarEvent {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  type        String
  startTime   DateTime
  endTime     DateTime?
  courseId    String?
  lessonId    String?
  teacherId   String?
  studentId   String?
  location    String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  course      Course?  @relation(fields: [courseId], references: [id])
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  teacher     User?    @relation("EventTeacher", fields: [teacherId], references: [id])
  student     User?    @relation("EventStudent", fields: [studentId], references: [id])
}

// BLOG ----------------------------------------------------------------------

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  excerpt     String?
  content     String
  image       String?
  authorId    String
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  readTime    Int?
  author      User        @relation("PostAuthor", fields: [authorId], references: [id])
  categories  PostCategory[]
  tags        PostTag[]
  comments    BlogComment[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  posts       PostCategory[]
}

model PostCategory {
  postId     String
  categoryId String
  post       BlogPost  @relation(fields: [postId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  @@id([postId, categoryId])
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  posts       PostTag[]
}

model PostTag {
  postId String
  tagId  String
  post   BlogPost @relation(fields: [postId], references: [id])
  tag    Tag      @relation(fields: [tagId], references: [id])
  @@id([postId, tagId])
}

model BlogComment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  parentId  String?
  post      BlogPost     @relation(fields: [postId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  parent    BlogComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   BlogComment[] @relation("CommentReplies")
} 