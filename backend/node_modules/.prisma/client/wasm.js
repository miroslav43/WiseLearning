
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  avatar: 'avatar',
  bio: 'bio',
  createdAt: 'createdAt',
  points: 'points',
  referralCode: 'referralCode',
  referredById: 'referredById',
  lastLogin: 'lastLogin'
};

exports.Prisma.TeacherProfileScalarFieldEnum = {
  userId: 'userId',
  specialization: 'specialization',
  rating: 'rating',
  students: 'students',
  education: 'education',
  experience: 'experience',
  certificates: 'certificates'
};

exports.Prisma.UserAvailabilityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime'
};

exports.Prisma.PointsTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.PointsPackageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  points: 'points',
  price: 'price',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  subject: 'subject',
  image: 'image',
  price: 'price',
  pointsPrice: 'pointsPrice',
  teacherId: 'teacherId',
  students: 'students',
  rating: 'rating',
  status: 'status',
  featured: 'featured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  title: 'title',
  description: 'description',
  orderIndex: 'orderIndex'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  title: 'title',
  description: 'description',
  videoUrl: 'videoUrl',
  content: 'content',
  duration: 'duration',
  orderIndex: 'orderIndex',
  type: 'type',
  courseId: 'courseId'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  title: 'title',
  description: 'description',
  timeLimit: 'timeLimit'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  questionText: 'questionText',
  type: 'type',
  options: 'options',
  correctOptions: 'correctOptions',
  orderIndex: 'orderIndex'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  lessonId: 'lessonId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  maxScore: 'maxScore',
  allowFileUpload: 'allowFileUpload',
  allowedFileTypes: 'allowedFileTypes',
  unitTests: 'unitTests'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  enrolledAt: 'enrolledAt',
  completed: 'completed',
  completedAt: 'completedAt',
  status: 'status'
};

exports.Prisma.SavedCourseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  savedAt: 'savedAt'
};

exports.Prisma.LikedCourseScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  likedAt: 'likedAt'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  lessonId: 'lessonId',
  completed: 'completed',
  completedAt: 'completedAt',
  lastPosition: 'lastPosition'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  quizId: 'quizId',
  score: 'score',
  duration: 'duration',
  completedAt: 'completedAt',
  answers: 'answers',
  courseId: 'courseId'
};

exports.Prisma.AssignmentSubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  assignmentId: 'assignmentId',
  content: 'content',
  fileUrls: 'fileUrls',
  submittedAt: 'submittedAt',
  score: 'score',
  feedback: 'feedback',
  gradedAt: 'gradedAt',
  gradedById: 'gradedById'
};

exports.Prisma.CourseReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.TutoringSessionScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  subject: 'subject',
  description: 'description',
  pricePerHour: 'pricePerHour',
  locationType: 'locationType',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  maxStudents: 'maxStudents',
  prerequisites: 'prerequisites',
  level: 'level',
  tags: 'tags',
  featured: 'featured'
};

exports.Prisma.TutoringAvailabilityScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime'
};

exports.Prisma.TutoringRequestScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  studentId: 'studentId',
  message: 'message',
  preferredDates: 'preferredDates',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TutoringAppointmentScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  sessionId: 'sessionId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  notes: 'notes',
  meetingLink: 'meetingLink',
  status: 'status',
  price: 'price',
  teacherId: 'teacherId',
  studentId: 'studentId'
};

exports.Prisma.TutoringReviewScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  studentId: 'studentId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.TutoringMessageScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  senderId: 'senderId',
  message: 'message',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pointsRewarded: 'pointsRewarded',
  icon: 'icon',
  category: 'category'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  completed: 'completed',
  completedAt: 'completedAt',
  progress: 'progress'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  type: 'type',
  category: 'category'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  issueDate: 'issueDate',
  type: 'type',
  courseId: 'courseId',
  courseName: 'courseName',
  tutoringId: 'tutoringId',
  tutoringSubject: 'tutoringSubject',
  teacherId: 'teacherId',
  teacherName: 'teacherName',
  customMessage: 'customMessage',
  imageUrl: 'imageUrl',
  badgeId: 'badgeId'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  conversationId: 'conversationId',
  userId: 'userId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  content: 'content',
  timestamp: 'timestamp',
  read: 'read'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  fileName: 'fileName',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  fileSize: 'fileSize'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  read: 'read',
  type: 'type',
  link: 'link',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  period: 'period',
  featuredBenefit: 'featuredBenefit',
  benefits: 'benefits',
  isPopular: 'isPopular'
};

exports.Prisma.CourseBundleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  originalPrice: 'originalPrice',
  discount: 'discount',
  featuredBenefit: 'featuredBenefit',
  benefits: 'benefits',
  imageUrl: 'imageUrl'
};

exports.Prisma.BundleCourseScalarFieldEnum = {
  bundleId: 'bundleId',
  courseId: 'courseId'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  autoRenew: 'autoRenew',
  paymentMethod: 'paymentMethod',
  lastPaymentDate: 'lastPaymentDate'
};

exports.Prisma.UserBundleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bundleId: 'bundleId',
  purchaseDate: 'purchaseDate'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  status: 'status',
  referenceType: 'referenceType',
  referenceId: 'referenceId',
  transactionId: 'transactionId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  type: 'type',
  startTime: 'startTime',
  endTime: 'endTime',
  courseId: 'courseId',
  lessonId: 'lessonId',
  teacherId: 'teacherId',
  studentId: 'studentId',
  location: 'location',
  createdAt: 'createdAt'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  excerpt: 'excerpt',
  content: 'content',
  image: 'image',
  authorId: 'authorId',
  published: 'published',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  readTime: 'readTime'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description'
};

exports.Prisma.PostCategoryScalarFieldEnum = {
  postId: 'postId',
  categoryId: 'categoryId'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug'
};

exports.Prisma.PostTagScalarFieldEnum = {
  postId: 'postId',
  tagId: 'tagId'
};

exports.Prisma.BlogCommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt',
  parentId: 'parentId'
};

exports.Prisma.ReferralCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  userId: 'userId',
  isActive: 'isActive',
  usageLimit: 'usageLimit',
  maxUses: 'maxUses',
  pointsReward: 'pointsReward',
  isUserCode: 'isUserCode',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralUseScalarFieldEnum = {
  id: 'id',
  referralCodeId: 'referralCodeId',
  userId: 'userId',
  pointsAwarded: 'pointsAwarded',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  student: 'student',
  teacher: 'teacher',
  admin: 'admin'
};

exports.PointsTxnType = exports.$Enums.PointsTxnType = {
  purchase: 'purchase',
  course_purchase: 'course_purchase',
  referral: 'referral',
  achievement: 'achievement'
};

exports.CourseStatus = exports.$Enums.CourseStatus = {
  draft: 'draft',
  published: 'published',
  archived: 'archived',
  rejected: 'rejected'
};

exports.LessonType = exports.$Enums.LessonType = {
  lesson: 'lesson',
  quiz: 'quiz',
  assignment: 'assignment'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  single: 'single',
  multiple: 'multiple',
  true_false: 'true_false',
  order: 'order'
};

exports.TutoringLocationType = exports.$Enums.TutoringLocationType = {
  online: 'online',
  offline: 'offline',
  both: 'both'
};

exports.TutoringStatus = exports.$Enums.TutoringStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.TutoringRequestStatus = exports.$Enums.TutoringRequestStatus = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  confirmed: 'confirmed',
  completed: 'completed',
  cancelled: 'cancelled'
};

exports.AchievementCategory = exports.$Enums.AchievementCategory = {
  learning: 'learning',
  community: 'community',
  mastery: 'mastery'
};

exports.BadgeType = exports.$Enums.BadgeType = {
  course: 'course',
  tutoring: 'tutoring',
  achievement: 'achievement'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  info: 'info',
  success: 'success',
  warning: 'warning',
  error: 'error',
  TUTORING_REQUEST: 'TUTORING_REQUEST',
  TUTORING_ACCEPTED: 'TUTORING_ACCEPTED',
  TUTORING_REJECTED: 'TUTORING_REJECTED',
  COURSE_APPROVED: 'COURSE_APPROVED',
  COURSE_REJECTED: 'COURSE_REJECTED'
};

exports.SubscriptionPeriod = exports.$Enums.SubscriptionPeriod = {
  monthly: 'monthly',
  annual: 'annual'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded'
};

exports.PaymentReferenceType = exports.$Enums.PaymentReferenceType = {
  subscription: 'subscription',
  course: 'course',
  bundle: 'bundle',
  points: 'points'
};

exports.Prisma.ModelName = {
  User: 'User',
  TeacherProfile: 'TeacherProfile',
  UserAvailability: 'UserAvailability',
  PointsTransaction: 'PointsTransaction',
  PointsPackage: 'PointsPackage',
  Course: 'Course',
  Topic: 'Topic',
  Lesson: 'Lesson',
  Quiz: 'Quiz',
  Question: 'Question',
  Assignment: 'Assignment',
  Enrollment: 'Enrollment',
  SavedCourse: 'SavedCourse',
  LikedCourse: 'LikedCourse',
  LessonProgress: 'LessonProgress',
  QuizAttempt: 'QuizAttempt',
  AssignmentSubmission: 'AssignmentSubmission',
  CourseReview: 'CourseReview',
  TutoringSession: 'TutoringSession',
  TutoringAvailability: 'TutoringAvailability',
  TutoringRequest: 'TutoringRequest',
  TutoringAppointment: 'TutoringAppointment',
  TutoringReview: 'TutoringReview',
  TutoringMessage: 'TutoringMessage',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Badge: 'Badge',
  Certificate: 'Certificate',
  Conversation: 'Conversation',
  ConversationParticipant: 'ConversationParticipant',
  Message: 'Message',
  Attachment: 'Attachment',
  Notification: 'Notification',
  SubscriptionPlan: 'SubscriptionPlan',
  CourseBundle: 'CourseBundle',
  BundleCourse: 'BundleCourse',
  UserSubscription: 'UserSubscription',
  UserBundle: 'UserBundle',
  Payment: 'Payment',
  CalendarEvent: 'CalendarEvent',
  BlogPost: 'BlogPost',
  Category: 'Category',
  PostCategory: 'PostCategory',
  Tag: 'Tag',
  PostTag: 'PostTag',
  BlogComment: 'BlogComment',
  ReferralCode: 'ReferralCode',
  ReferralUse: 'ReferralUse'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
